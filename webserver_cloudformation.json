
{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Intuz WordPress - CloudFormation Stack with EC2, VPC, RDS. Version2",
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "Amazon EC2 Configuration"
          },
          "Parameters": [
            "InstanceType",
            "EC2InstanceName",
            "KeyName",
            "SSHLocation"
          ]
        },
        {
          "Label":{
            "default": "Network Configuration"
          },
          "Parameters": [
            "VPCNetworkCIDR",
            "VPCNetwork0CIDR",
            "VPCNetwork1CIDR",
            "VPCNetwork2CIDR"
          ]
        },
        {
          "Label": {
            "default": "Amazon RDS Configuration"
          },
          "Parameters": [
            "RDSInstanceName",
            "RDSInstanceType",
            "MySQLUserName",
            "MySQLPassword",
            "DatabaseName",
            "DBAllocatedStorage"
          ]
        }
      ],
      "ParameterLabels": {
        "VPCID": {
          "default": "Which VPC should this be deployed to?"
        },
        "EC2InstanceName": {
          "default": "Value"
        },
        "InstanceType": {
          "default": "Instance Type"
        },
        "KeyName": {
          "default": "Key Name"
        },
        "SSHLocation": {
          "default": "SSH Location"
        },
        
        "RDSInstanceName": {
          "default": "Value"
        },
        "RDSInstanceType": {
          "default": "Instance Type"
        },
        "MySQLUserName": {
          "default": "MySQL Admin Username"
        },
        "MySQLPassword": {
          "default": "MySQL Admin Password"
        },
        "DatabaseName":{
          "default": "Insert DB Name"
        },
        "DBAllocatedStorage": {
          "default": "DB Allocated Storage"
        }
      }
    }
  },
  "Mappings": {
    "MPIntuz": {
      "us-east-1": {
        "AMI": "ami-0a4e3adb7fccc5e01"
      },"us-east-2": {
        "AMI": "ami-058fea0dcd5b42f9c"
      },"ap-east-1": {
        "AMI": "ami-05fce248cf20d3690"
      },"eu-south-1": {
        "AMI": "ami-0c851d8affcbb455e"
      },"af-south-1": {
        "AMI": "ami-0bf33ed6b94a69e0c"
      },"us-west-2": {
        "AMI": "ami-0e651f7a7d019e641"
      },"eu-west-1": {
        "AMI": "ami-0d5b264c7cf02ce25"
      }
    }
  },
  "Parameters": {
    "KeyName": {
      "Description": "Name of an existing EC2 key pair to enable SSH access to the instances",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription": "Must be the name of an existing EC2 KeyPair.",
      "MinLength": "1",
      "Default": "default_key"
    },
    "SSHLocation": {
      "Description": "The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})", 
      "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x.",
      "Default": "0.0.0.0/0"
    },
    "VPCNetworkCIDR" : {
      "Description": "The CIDR block for the entire VPC network",
      "Type": "String",
      "AllowedPattern" : "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
      "ConstraintDescription" : "CIDR block parameter must be in the form x.x.x.x/16-28 for e.g 10.0.0.0/16 or 172.16.0.0/16",
      "Default": "10.0.0.0/16"

    },
    "VPCNetwork0CIDR" : {
      "Description": "The CIDR block for the Public network",
      "Type": "String",
      "AllowedPattern" : "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
      "ConstraintDescription" : "CIDR block parameter must be in the form x.x.x.x/16-28 for e.g 10.0.0.0/24 or 172.16.0.0/24",
      "Default": "10.0.1.0/24"

    },
    "VPCNetwork1CIDR" : {
      "Description": "CIDR block for the public subnet 1 located in Availability Zone 1",
      "Type": "String",
      "AllowedPattern" : "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
      "ConstraintDescription" : "CIDR block parameter must be in the form x.x.x.x/16-28 for e.g 10.0.1.0/24 or 172.16.1.0/24",
      "Default": "10.0.2.0/24"

    },
    "VPCNetwork2CIDR" : {
      "Description": "CIDR block for the public subnet 2 located in Availability Zone 2",
      "Type": "String",
      "AllowedPattern" : "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
      "ConstraintDescription" : "CIDR block parameter must be in the form x.x.x.x/16-28 for e.g 10.0.2.0/24 or 172.16.2.0/24",
      "Default": "10.0.3.0/24"

    },

    "EC2InstanceName" : {
      "Description": "EC2 Instance Name",
      "Type": "String",
      "AllowedPattern" : "[a-zA-Z]*",
      "ConstraintDescription" : "Your EC2 instance Name in value for e.g myec2instance",
      "Default":"WebInstance"
    },
    "InstanceType": {
      "Description": "EC2 instance type",
      "Type": "String",
      "Default": "t3a.nano",
      "AllowedValues": [
        "t2.micro",
        "t3a.nano",
        "t2.small",
        "t2.medium",
        "t2.large",
        "t2.xlarge",
        "t2.2xlarge",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge",
        "m4.16xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "d2.xlarge",
        "d2.2xlarge",
        "d2.4xlarge",
        "d2.8xlarge",
        "g2.2xlarge",
        "g2.8xlarge",
        "f1.2xlarge",
        "f1.16xlarge",
        "hi1.4xlarge",
        "hs1.8xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge",
        "p2.xlarge",
        "p2.8xlarge",
        "p2.16xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge",
        "r4.large",
        "r4.xlarge",
        "r4.2xlarge",
        "r4.4xlarge",
        "r4.8xlarge",
        "r4.16xlarge",
        "x1.32xlarge",
        "x1.16xlarge"
      ],
      "ConstraintDescription": "Must be a valid EC2 instance type."
    },
    "MySQLUserName": {
      "Description": "UserName for the RDS.",
      "Default": "admin",
      "Type": "String",
      "NoEcho": "false"
    },
    "MySQLPassword": {
      "Description": "Password for the RDS User - Between 8-32 characters; Include at least one digit, upper case letter,lower case letter and no special characters.",
      "Type": "String",
      "MinLength": "8",
      "MaxLength": "32",
      "AllowedPattern": "(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])^([a-zA-Z0-9]{8,20})",
      "ConstraintDescription": "Your Database Admin Password must be between 8 and 32 characters, include at least one digit, upper case letter and only contain acceptable characters.",
      "Default": "Admin123Admin123",
      "NoEcho": "true",
    },
    "RDSInstanceName" : {
      "Description": "RDS Instance Name",
      "Type": "String",
      "Default": "DbInstance",
      "AllowedPattern" : "[a-zA-Z]*",
      "ConstraintDescription" : "Your RDS instance Name in value for e.g mydbinstance"
    },
    "DatabaseName": {
      "Description": "The name of the database inside the instance.",
      "Default": "Test",
      "Type": "String",
      "AllowedPattern": "[a-zA-Z]*"
    },
    "RDSInstanceType": {
      "Description": "RDS Instance Type",
      "Default": "t3a.nano",
      "Type": "String",
      "AllowedValues": [
        "db.t2.micro",
        "db.t2.small",
        "db.t2.medium",
        "t3a.nano",
        "db.m1.small",
        "db.t2.large",
        "db.m1.medium",
        "db.m1.large",
        "db.m1.xlarge",
        "db.m3.medium",
        "db.m3.large",
        "db.m3.xlarge",
        "db.m3.2xlarge",
        "db.m2.xlarge",
        "db.m2.2xlarge",
        "db.m2.4xlarge",
        "db.m4.large",
        "db.m4.xlarge",
        "db.m4.2xlarge",
        "db.m4.4xlarge",
        "db.m4.10xlarge",
        "db.r3.large",
        "db.r3.xlarge",
        "db.r3.2xlarge",
        "db.r3.4xlarge",
        "db.r3.8xlarge"
      ],
      "ConstraintDescription": "Must be a valid RDS Instance Type."
    },
    "DBAllocatedStorage": {
      "Default": "10",
      "Description": "The size of the database (Gb)",
      "Type": "Number",
      "MinValue": "5",
      "MaxValue": "3072",
      "ConstraintDescription": "Must be between 5 and 3072Gb."
    }
  },
  "Resources": {
      "DBSubnet": {
        "Type": "AWS::EC2::Subnet",
        "Properties": {
          "CidrBlock": { "Ref": "VPCNetwork1CIDR" },
          "AvailabilityZone": {
            "Fn::Select": ["0", {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }]
          },
          "MapPublicIpOnLaunch": "false",
          "VpcId": {
            "Ref": "VPC"
          },
          "Tags": [
            {
              "Key": "Name",
              "Value": {
                "Ref": "AWS::StackName"
              }
            }
          ]
        }
      },
      "PublicSubnet": {
        "Type": "AWS::EC2::Subnet",
        "Properties": {
          "CidrBlock": { "Ref": "VPCNetwork0CIDR" },
          "AvailabilityZone": {
            "Fn::Select": ["0", {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }]
          },
          "MapPublicIpOnLaunch": "true",
          "VpcId": {
            "Ref": "VPC"
          },
          "Tags": [
            {
              "Key": "Name",
              "Value": {
                "Ref": "AWS::StackName"
              }
            }
          ]
        }
      },
      "RouteTable": {
        "Type": "AWS::EC2::RouteTable",
        "Properties": {
          "VpcId": {
            "Ref": "VPC"
          },
          "Tags": [
            {
              "Key": "Name",
              "Value": {
                "Ref": "AWS::StackName"
              }
            }
          ]
        }
      },
      "AssociationRtToPubSub": {
        "Type": "AWS::EC2::SubnetRouteTableAssociation",
        "Properties": {
          "RouteTableId": {
            "Ref": "RouteTable"
          },
          "SubnetId": {
            "Ref": "PublicSubnet"
          }
        }
      },
      "InternetGateway": {
        "DependsOn": "VPC",
        "Type": "AWS::EC2::InternetGateway",
        "Properties": {
          "Tags": [
            {
              "Key": "Name",
              "Value": {
                "Ref": "AWS::StackName"
              }
            }
          ]
        }
      },
      "AttachGatewayToVPC": {
        "DependsOn": [
          "VPC",
          "InternetGateway"
        ],
        "Type": "AWS::EC2::VPCGatewayAttachment",
        "Properties": {
          "InternetGatewayId": {
            "Ref": "InternetGateway"
          },
          "VpcId": {
            "Ref": "VPC"
          }
        }
      },
      "Route": {
        "Type": "AWS::EC2::Route",
        "DependsOn": "AttachGatewayToVPC",
        "Properties": {
          "DestinationCidrBlock": "0.0.0.0/0",
          "GatewayId": {
            "Ref": "InternetGateway"
          },
          "RouteTableId": {
            "Ref": "RouteTable"
          }
        }
      },
      "VPC": {
        "Type": "AWS::EC2::VPC",
        "Properties": {
          "CidrBlock": { "Ref": "VPCNetworkCIDR" },
          "InstanceTenancy": "default",
          "EnableDnsSupport": "true",
          "EnableDnsHostnames": "true",
          "Tags": [
            {
              "Key": "Name",
              "Value": {
                "Ref": "AWS::StackName"
              }
            },
            {
              "Key": "Application",
              "Value": {
                "Ref": "AWS::StackName"
              }
            }
          ]
        }
      },

      "SecurityGroupInstance": {
        "Type": "AWS::EC2::SecurityGroup",
        "Properties": {
          "GroupDescription": "SG for EC2 Instance",
          "SecurityGroupIngress": [
            {
              "IpProtocol": "tcp",
              "FromPort": "22",
              "ToPort": "22",
              "CidrIp": {
                "Ref": "SSHLocation"
              }
            },
            {
              "IpProtocol": "tcp",
              "FromPort": "80",
              "ToPort": "80",
              "CidrIp": "0.0.0.0/0"
            },
            {
              "IpProtocol" : "tcp",
              "FromPort" : "3306",
              "ToPort" : "3306",
              "CidrIp" : {
                "Ref": "SSHLocation"
              }
            }
          ],
          "Tags": [
            {
              "Key": "Application",
              "Value": {
                "Ref": "AWS::StackName"
              }
            }
          ],
          "VpcId": {
            "Ref": "VPC"
          }
        }
      },
      "WebInstance": {
      "Type": "AWS::EC2::Instance",
      

      "DependsOn": ["AttachGatewayToVPC","DbInstance"],
      "Metadata": {
        "AWS::CloudFormation::Init": {



          "config": {
            "files": {
              "/opt/aws/cloud_formation.json": {
                "content": "{\n\t  \"rds\" : {\n\t\t\"database\" : \"{{database}}\",\n\t\t\"username\" : \"{{username}}\",\n\t\t\"password\" : \"{{password}}\",\n\t\t\"endpoint\" : \"$endpoint\",\n\t\t\"port\"     : 3306\n\t  }\n\t}",
                  "context": {
                    "database": {
                      "Ref": "DatabaseName"
                    },
                    "username": {
                      "Ref": "MySQLUserName"
                    },
                    "password": {
                      "Ref": "MySQLPassword"
                    }
                  },
                  "mode": "00644",
                  "owner": "root",
                  "group": "root"
                }
              }
            }
          }
        },
        "Properties": {
          "DisableApiTermination": "false",
          "EbsOptimized": "false",
          "UserData": {
            "Fn::Base64": "#!/bin/bash export endpoint=${DbInstance.PrivateIp}"
          },
          "ImageId": {
            "Fn::FindInMap": [
              "MPIntuz",
              {
                "Ref": "AWS::Region"
              },
              "AMI"
            ]
          },
          "InstanceInitiatedShutdownBehavior": "stop",
          "InstanceType": {
            "Ref": "InstanceType"
          },
          "KeyName": {
            "Ref": "KeyName"
          },
          "Monitoring": "false",
          "SubnetId": {
            "Ref": "PublicSubnet"
          },
          "Tenancy": "default",
          "SecurityGroupIds": [
            {
              "Ref": "SecurityGroupInstance"
            }
          ],
          
          "Tags": [
            {
              "Key": "Application",
              "Value": {
                "Ref": "AWS::StackName"
              }
            },
            {
              "Key": "Name",
              "Value": {
                "Ref": "EC2InstanceName"
              }
            }
          ]
        }
      },
      "DbInstance": {
        "Type": "AWS::EC2::Instance",
        "Properties": {
          "KeyName": "awsjs",
          "ImageId": "ami-009d6802948d06e52",
          "InstanceType": {
            "Ref": "RDSInstanceType"
          },
          
          "SecurityGroupIds": [
            {
              "Ref": "SecurityGroupInstance"
            }
          ],
          "SubnetId": "DBSubnet",
          "UserData": {
            "Fn::Base64": "#!/bin/bash -ex\nsudo su\nyum localinstall -y https://dev.mysql.com/get/mysql80-community-release-el7-1.noarch.rpm\nyum install -y mysql-community-server\nsystemctl enable mysqld\nsystemctl start mysqld\nmysql -u root \"-p$(grep -oP '(?<=root@localhost\\: )\\S+' /var/log/mysqld.log)\" -e \"ALTER USER 'root'@'localhost' IDENTIFIED BY '${DbMasterPassword}'\" --connect-expired-password\nmysql -u root \"-p${DbMasterPassword}\" -e \"CREATE USER '${DbMasterUsername}'@'%' IDENTIFIED BY '${DbMasterPassword}'\"\nmysql -u root \"-p${DbMasterPassword}\" -e \"GRANT ALL PRIVILEGES ON *.* TO '${DbMasterUsername}'@'%'\"\nmysql -u root \"-p${DbMasterPassword}\" -e \"FLUSH PRIVILEGES\"\n"
          },
          "Tags": [
            {
              "Key": "Name",
              "Value": "EC2-DB"
            }
          ]
        }
      },
      "SGBaseIngress": {
        "Type": "AWS::EC2::SecurityGroupIngress",
        "DependsOn": "SecurityGroupInstance",
        "Properties": {
          "GroupId": {
            "Ref": "SecurityGroupInstance"
          },
          "IpProtocol": "tcp",
          "ToPort": "443",
          "FromPort": "443",
          "CidrIp" : "0.0.0.0/0"
        }
      }
    },
    "Outputs": {
      "MantisBTURL": {
        "Description": "WordPress URL",
        "Value" : { "Fn::Join" : ["", ["http://", { "Fn::GetAtt" : [ "WebInstance", "PublicIp" ]} ]]}
      }
    }
  }
