{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "WordPress - CloudFormation Stack with EC2, VPC",
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "Amazon EC2 Configuration"
          },
          "Parameters": [
            "InstanceType",
            "EC2InstanceName",
            "KeyName",
            "SSHLocation"
          ]
        },
        {
          "Label": {
            "default": "Network Configuration"
          },
          "Parameters": [
            "VPCNetworkCIDR",
            "VPCNetwork0CIDR",
            "VPCNetwork1CIDR",
            "VPCNetwork2CIDR"
          ]
        },
        {
          "Label": {
            "default": "Amazon DB Configuration"
          },
          "Parameters": [
            "DBInstanceName",
            "DBBInstanceType",
            "MySQLUserName",
            "MySQLPassword",
            "DatabaseName",
            "DBAllocatedStorage"
          ]
        }
      ],
      "ParameterLabels": {
        "VPCID": {
          "default": "Which VPC should this be deployed to?"
        },
        "EC2InstanceName": {
          "default": "Value"
        },
        "InstanceType": {
          "default": "Instance Type"
        },
        "KeyName": {
          "default": "Key Name"
        },
        "SSHLocation": {
          "default": "SSH Location"
        },
        "MySQLUserName": {
          "default": "MySQL Admin Username"
        },
        "MySQLPassword": {
          "default": "MySQL Admin Password"
        },
        "DatabaseName": {
          "default": "Insert DB Name"
        },
        "DBAllocatedStorage": {
          "default": "DB Allocated Storage"
        }
      }
    }
  },
 




 
  "Mappings": {
    "Images": {
      "us-east-1": {
        "Value": "ami-04d29b6f966df1537"
      },
      "us-west-1": {
        "Value": "ami-a540a5e1"
      },
      "us-west-2": {
        "Value": "ami-4dbf9e7d"
      }
    }
  },
  





  "Parameters": {
    "KeyName": {
      "Description": "Name of an existing EC2 key pair to enable SSH access to the instances",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription": "Must be the name of an existing EC2 KeyPair.",
      "MinLength": "1",
      "Default": "default_key"
    },
    "SSHLocation": {
      "Description": "The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x.",
      "Default": "0.0.0.0/0"
    },
    "VPCNetworkCIDR": {
      "Description": "The CIDR block for the entire VPC network",
      "Type": "String",
      "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
      "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28 for e.g 10.0.0.0/16 or 172.16.0.0/16",
      "Default": "10.0.0.0/16"
    },
    "VPCNetwork0CIDR": {
      "Description": "The CIDR block for the Public network",
      "Type": "String",
      "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
      "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28 for e.g 10.0.0.0/24 or 172.16.0.0/24",
      "Default": "10.0.1.0/24"
    },
    "VPCNetwork1CIDR": {
      "Description": "CIDR block for the public subnet 1 located in Availability Zone 1",
      "Type": "String",
      "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
      "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28 for e.g 10.0.1.0/24 or 172.16.1.0/24",
      "Default": "10.0.2.0/24"
    },
    "VPCNetwork2CIDR": {
      "Description": "CIDR block for the public subnet 2 located in Availability Zone 2",
      "Type": "String",
      "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
      "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28 for e.g 10.0.2.0/24 or 172.16.2.0/24",
      "Default": "10.0.3.0/24"
    },
    "EC2InstanceName": {
      "Description": "EC2 Instance Name",
      "Type": "String",
      "AllowedPattern": "[a-zA-Z]*",
      "ConstraintDescription": "Your EC2 instance Name in value for e.g myec2instance",
      "Default": "WebInstance"
    },
    "InstanceType": {
      "Description": "EC2 instance type",
      "Type": "String",
      "Default": "t2.micro",
      "AllowedValues": [
        "t2.micro",
        "t3a.nano",
        "t3.nano",
        "t2.small",
        "t2.medium"       
      ],
      "ConstraintDescription": "Must be a valid EC2 instance type."
    },
    "MySQLUserName": {
      "Description": "UserName for the RDS.",
      "Default": "admin",
      "Type": "String",
      "NoEcho": "false"
    },
    "MySQLPassword": {
      "Description": "Password for the DB User - Between 8-32 characters; Include at least one digit, upper case letter,lower case letter and no special characters.",
      "Type": "String",
      "MinLength": "8",
      "MaxLength": "32",
      "AllowedPattern": "(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])^([a-zA-Z0-9]{8,20})",
      "ConstraintDescription": "Your Database Admin Password must be between 8 and 32 characters, include at least one digit, upper case letter and only contain acceptable characters.",
      "Default": "Admin123Admin123",
      "NoEcho": "true"
    },
    "DBInstanceName": {
      "Description": "DB Instance Name",
      "Type": "String",
      "Default": "DbInstance",
      "AllowedPattern": "[a-zA-Z]*",
      "ConstraintDescription": "Your DB instance Name in value for e.g mydbinstance"
    },
    "DatabaseName": {
      "Description": "The name of the database inside the instance.",
      "Default": "Test",
      "Type": "String",
      "AllowedPattern": "[a-zA-Z]*"
    },
    "DBInstanceType": {
      "Description": "DB Instance Type",
      "Default": "t2.micro",
      "Type": "String",
      "AllowedValues": [
        "t2.micro",
        "t3a.nano",
        "t3.nano",
        "t2.small",
        "t2.medium"   
      ],
      "ConstraintDescription": "Must be a valid RDS Instance Type."
    },
    "DBAllocatedStorage": {
      "Default": "10",
      "Description": "The size of the database (Gb)",
      "Type": "Number",
      "MinValue": "5",
      "MaxValue": "3072",
      "ConstraintDescription": "Must be between 5 and 3072Gb."
    }
  },
  "Resources": {
    "DBSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": {
          "Ref": "VPCNetwork1CIDR"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            "0",
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        },
        "MapPublicIpOnLaunch": "false",
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ]
      }
    },
    "PublicSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": {
          "Ref": "VPCNetwork0CIDR"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            "0",
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        },
        "MapPublicIpOnLaunch": "true",
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ]
      }
    },
    "PublicRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ]
      }
    },
    "AssociationRtToPubSub": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "SubnetId": {
          "Ref": "PublicSubnet"
        }
      }
    },
    "PrivateRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ]
      }
    },
    "AssociationRtToPrivateSub": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "PrivateRouteTable"
        },
        "SubnetId": {
          "Ref": "DBSubnet"
        }
      }
    },






    "InternetGateway": {
      "DependsOn": "VPC",
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ]
      }
    },
    "AttachGatewayToVPC": {
      "DependsOn": [
        "VPC",
        "InternetGateway"
      ],
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        },
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "DefaultPublicRoute": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "AttachGatewayToVPC",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        },
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        }
      }
    },
    "DefaultPrivateRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "PrivateRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId" : { "Ref" : "NatGateway" }
      }
    },



    "NatGateway" : {
       "Type" : "AWS::EC2::NatGateway",
       "Properties" : {
          "AllocationId" : { "Fn::GetAtt" : ["NatGatewayEIP", "AllocationId"]},
          "SubnetId" : { "Ref" : "PublicSubnet"},
          "Tags" : [ {"Key" : "name", "Value" : "NatGateway" } ]
         }
    },
    "NatGatewayEIP" : {
       "Type" : "AWS::EC2::EIP",
       "DependsOn" : "AttachGatewayToVPC",
       "Properties" : {
          "Domain" : "vpc"
       }
    },

    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": {
          "Ref": "VPCNetworkCIDR"
        },
        "InstanceTenancy": "default",
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ]
      }
    },
    "SecurityGroupInstance": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "SG for EC2 Instance",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "SSHLocation"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "3306",
            "ToPort": "3306",
            "CidrIp": {
              "Ref": "SSHLocation"
            }
          }
        ],
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
   "WebInstance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "KeyName": {
          "Ref": "KeyName"
        },
        "IamInstanceProfile": "Role_s3_fullaccess",
        "ImageId": "ami-04d29b6f966df1537",
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "SecurityGroupIds": [
          {
            "Ref": "SecurityGroupInstance"
          }
        ],
        "SubnetId": {
          "Ref": "PublicSubnet"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Webinstance"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/sh\n",
                "curl -O https://bootstrap.pypa.io/get-pip.py\n",
                "python get-pip.py\n",
                "pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
                "/opt/aws/bin/cfn-init -v",
                " --region ",
                {
                  "Ref": "AWS::Region"
                },
                " --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                " --resource WebServer0\n",
                "yum -y install httpd php php-mysql\n",
                "cd /var/www/html\n",
                "curl -sL https://wordpress.org/latest.tar.gz | tar xfz -\n",
                "chown -R root:root wordpress\n",
                "sed -e 's/database_name_here/wordpress/'",
                " -e 's/username_here/wordpress/'",
                " -e 's/password_here/smartvm/'",
                " -e 's/localhost/",
                {
                  "Fn::GetAtt": [
                    "DbInstance",
                    "PrivateIp"
                  ]
                },
                "/'",
                " < wordpress/wp-config-sample.php > wordpress/wp-config.php\n",
                "echo 'RedirectMatch ^/$ /wordpress' > /etc/httpd/conf.d/wordpress.conf\n",
                "setsebool -P httpd_can_network_connect on\n",
                "systemctl enable httpd && systemctl start httpd\n",
                "mkdir -p /home/ec2-user/s3\ncd /home/ec2-user/s3\naws s3 sync s3://bpwordpresscfbucket .\n",
                "sudo chown ec2-user default_key.pem\n",
                "sudo chmod 400 default_key.pem\n"
              ]
            ]
          }
        }
      }
    },
    "DbInstance": {
      "Type": "AWS::EC2::Instance",
      "Metadata": {
            "AWS::CloudFormation::Init": {
               "configSets": {
                  "wordpress_install": [
                     "install_cfn",
                     "install_mysql"
                  ]
               },
               "configure_mysql": {
                  "commands": {
                     "00_ping_aws":{
                        "command": "curl -I https://aws.amazon.com"
                     },
                     "01_set_mysql_root_password": {
                        "command": { "Fn::Sub": [ "mysqladmin -u root password '${DBRootPassword}'", { "DBRootPassword": {"Ref" : "MySQLPassword" }} ]},
                        "test": { "Fn::Sub": [ "$(mysql ${DBName} -u root --password='${DBRootPassword}' >/dev/null 2>&1 </dev/null); (( $? != 0 ))", { "DBName": {"Ref" : "DatabaseName" },  "DBRootPassword": {"Ref" : "MySQLPassword" }} ]}
                     },
                     "02_create_database": {
                        "command": { "Fn::Sub": [ "mysql -u root --password='${DBRootPassword}' < /tmp/setup.mysql", { "DBRootPassword": {"Ref" : "MySQLPassword" }} ]}, 
                        "test": { "Fn::Sub": [ "$(mysql ${DBName} -u root --password='${DBRootPassword}' >/dev/null 2>&1 </dev/null); (( $? !=0))", { "DBName": {"Ref" : "DatabaseName" }, "DBRootPassword": {"Ref" : "MySQLPassword" }} ]} 
                     }
                  }
               },
               "install_cfn": {
                  "files": {
                     "/etc/cfn/cfn-hup.conf": {
                        "content": { "Fn::Sub": "[main]\nstack= ${AWS::StackId}\nregion=${AWS::Region}"}, 
                        "group": "root",
                        "mode": "000400",
                        "owner": "root"
                     },
                     "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                        "content": { "Fn::Sub": "[cfn-auto-reloader-hook]\ntriggers=post.update\npath=Resources.WebServer.Metadata.AWS::CloudFormation::Init\naction=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebServer --configsets wordpress_install --url https://stackbuilder.amazonaws.com\n}"},
                        "group": "root",
                        "mode": "000400",
                        "owner": "root"
                     }
                  },
                  "services": {
                     "sysvinit": {
                        "cfn-hup": {
                           "enabled": true,
                           "ensureRunning": true,
                           "files": [
                              "/etc/cfn/cfn-hup.conf",
                              "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                           ]
                        }
                     }
                  }
               },
               "install_mysql": {
                  "files": {
                     "/tmp/setup.mysql": {
                        "content": "CREATE DATABASE ${DBName};CREATE USER '${DBUser}'@'localhost' IDENTIFIED BY '${DBPassword}';GRANT ALL ON ${DBName}.* TO '${DBUser}'@'localhost';FLUSH PRIVILEGES;",
                        "group": "root",
                        "mode": "000400",
                        "owner": "root"
                     }
                  },
                  "packages": {
                     "yum": {
                        "httpd24": [],
                        "mysql": [],
                        "mysql-devel": [],
                        "mysql-libs": [],
                        "mysql-server": [],
                        "php73": [],
                        "php73-mysqlnd": []
                     }
                  },
                  "services": {
                     "sysvinit": {
                        "mysqld": {
                           "enabled": true,
                           "ensureRunning": true
                        }
                     }
                  }
               }
            }
         },
      "Properties": {
        "KeyName": {
          "Ref": "KeyName"
        },
        "IamInstanceProfile": "Role_s3_fullaccess",
        "ImageId": "ami-04d29b6f966df1537",
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "SecurityGroupIds": [
          {
            "Ref": "SecurityGroupInstance"
          }
        ],
        "SubnetId": {
          "Ref": "PublicSubnet"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "DBinstance"
          }
        ]
      }
    },
    "SGBaseIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "DependsOn": "SecurityGroupInstance",
      "Properties": {
        "GroupId": {
          "Ref": "SecurityGroupInstance"
        },
        "IpProtocol": "tcp",
        "ToPort": "443",
        "FromPort": "443",
        "CidrIp": "0.0.0.0/0"
      }
    }
  },
  "Outputs": {
    "MantisBTURL": {
      "Description": "WordPress URL",
      "Value": {
        "Fn::Join": [
          "",
          [
            "http://",
            {
              "Fn::GetAtt": [
                "WebInstance",
                "PublicIp"
              ]
            }
          ]
        ]
      }
    }
  }
}